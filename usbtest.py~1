#!/usr/bin/env python

import struct

import usb.backend.libusb1 as libusb1
import usb.control
import usb.core
import usb.util


# ----------------------------------------------------------------------------


CP210x_PURGE = 0x12
CP210x_IFC_ENABLE = 0x00
CP210x_SET_BAUDDIV = 0x01
CP210x_SET_LINE_CTL = 0x03
CP210x_GET_LINE_CTL = 0x04
CP210X_SET_BREAK = 0x05
CP210x_SET_MHS = 0x07
CP210x_SET_BAUDRATE = 0x1E
CP210x_SET_FLOW = 0x13
CP210x_SET_XON = 0x09
CP210x_SET_XOFF = 0x0A
CP210x_SET_CHARS = 0x19
CP210x_GET_MDMSTS = 0x08
CP210x_GET_COMM_STATUS = 0x10

CP210x_REQTYPE_HOST2DEVICE = 0x41
CP210x_REQTYPE_DEVICE2HOST = 0xC1

# ------------------------------------

CP210x_BREAK_ON = 0x0001
CP210x_BREAK_OFF = 0x0000

CP210x_MHS_RTS_ON = 0x202
CP210x_MHS_RTS_OFF = 0x200
CP210x_MHS_DTR_ON = 0x101
CP210x_MHS_DTR_OFF = 0x100

CP210x_PURGE_ALL = 0x000F

CP210x_UART_ENABLE = 0x0001
CP210x_UART_DISABLE = 0x0000
CP210x_LINE_CTL_DEFAULT = 0x0800
CP210x_MHS_DEFAULT = 0x0000
CP210x_MHS_DTR = 0x0001
CP210x_MHS_RTS = 0x0010
CP210x_MHS_ALL = 0x0011
CP210x_XON = 0x0000
CP210x_XOFF = 0x0000

DEFAULT_BAUDRATE = 9600

# ------------------------------------

DATA_BITS_5 = 5
DATA_BITS_6 = 6
DATA_BITS_7 = 7
DATA_BITS_8 = 8

STOP_BITS_1 = 1
STOP_BITS_15 = 3
STOP_BITS_2 = 2

PARITY_NONE = 0
PARITY_ODD = 1
PARITY_EVEN = 2
PARITY_MARK = 3
PARITY_SPACE = 4

FLOW_CONTROL_OFF = 0
FLOW_CONTROL_RTS_CTS = 1
FLOW_CONTROL_DSR_DTR = 2
FLOW_CONTROL_XON_XOFF = 3

# ----------------------------------------------------------------------------


def get_usbdevice(fd, shell=False):
    # setup library
    backend = libusb1.get_backend()
    lib = backend.lib
    ctx = backend.ctx


    # extend c wrapper with android functionality
    lib.libusb_wrap_sys_device.argtypes = [
        libusb1.c_void_p,
        libusb1.c_int,
        libusb1.POINTER(libusb1._libusb_device_handle)
    ]

    lib.libusb_get_device.argtypes = [
        libusb1.c_void_p
    ]
    lib.libusb_get_device.restype = libusb1._libusb_device_handle


    # get handle from file descriptor
    handle = libusb1._libusb_device_handle()
    libusb1._check(lib.libusb_wrap_sys_device(ctx, fd, libusb1.byref(handle)))
    print("usb handle:", handle)

    # get device (id?) from handle
    devid = lib.libusb_get_device(handle)
    print("usb devid:", devid)


    # device: devid + handle wrapper
    class DummyDevice():
        def __init__(self, devid, handle):
            self.devid = devid
            self.handle = handle

    dev = DummyDevice(devid, handle)


    # create pyusb device
    device = usb.core.Device(dev, backend)
    device._ctx.handle = dev


    # interactive explore
    if shell:
        # query some imformation
        dev_desc = backend.get_device_descriptor(dev)
        config_desc = backend.get_configuration_descriptor(dev, 0)


        from IPython.terminal.embed import InteractiveShellEmbed
        from IPython.terminal.ipapp import load_default_config

        InteractiveShellEmbed.clear_instance()
        namespace = {
            "fd": fd,
            "handle": handle,
            "devid": devid,
            "dev": dev,
            "dev_desc": dev_desc,
            "config_desc": config_desc,
            "device": device,
            "libusb1": libusb1,
            "backend": backend,
            "lib": lib,
            "ctx": ctx,
        }
        banner = "Variables:\n" + "\n".join(["{:>12}: {}".format(k, repr(v)) for k, v in namespace.items()]) + "\n"
        shell = InteractiveShellEmbed.instance(banner1=banner, user_ns=namespace)
        shell()

    # device.set_configuration()

    return device


def prep_usb_cp210x(device, intf=0):
    backend = device.backend
    dev = device._ctx.handle

    # https://github.com/felHR85/UsbSerial/blob/master/usbserial/src/main/java/com/felhr/usbserial/CP2102SerialDevice.java

    backend.claim_interface(dev, intf)

    configuration = device.configurations()[0]
    interface = configuration.interfaces()[0]
    endpoints = interface.endpoints()

    # https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/hardware/usb/UsbEndpoint.java
    # https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/hardware/usb/UsbConstants.java

    def is_endpoint_dir_in(endpoint):
        address = endpoint.bEndpointAddress
        endp_dir = usb.util.endpoint_direction(address)
        return endp_dir == usb.util.ENDPOINT_IN

    endp_in, endp_out = endpoints
    if not is_endpoint_dir_in(endp_in):
        endp_in, endp_out = endp_out, endp_in

    DEFAULT_BAUDRATE = 115200

    def setControlCommand(request, value, data):
        CP210x_REQTYPE_HOST2DEVICE = 0x41
        return device.ctrl_transfer(
                CP210x_REQTYPE_HOST2DEVICE, request,
                wValue=value, wIndex=intf,
                data_or_wLength=data, timeout=None)

    def setBaudRate(baudRate):
        data = struct.unpack("4B", struct.pack("<I",baudRate))
        return setControlCommand(CP210x_SET_BAUDRATE, 0, data)

    def setFlowControl(flowControl):
        if flowControl == FLOW_CONTROL_OFF:
            dataOff = [
                0x01, 0x00, 0x00, 0x00,
                0x40, 0x00, 0x00, 0x00,
                0x00, 0x80, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00
            ]
            return setControlCommand(CP210x_SET_FLOW, 0, dataOff)
        else:
            return

    ret = 0
    ret = setControlCommand(CP210x_IFC_ENABLE, CP210x_UART_ENABLE, None)
    print("uart enable:", ret)

    ret = setBaudRate(DEFAULT_BAUDRATE)
    print("set baud:", ret)

    ret = setControlCommand(CP210x_SET_LINE_CTL, CP210x_LINE_CTL_DEFAULT, None)
    print("line ctrl:", ret)

    ret = setFlowControl(FLOW_CONTROL_OFF)
    print("set flow ctrl:", ret)

    ret = setControlCommand(CP210x_SET_MHS, CP210x_MHS_DEFAULT, None)
    print("mhs:", ret)


def keep_reading(device):
    backend = device.backend
    dev = device._ctx.handle

    endpoints = device[0][(0, 0)]
    endp_in, endp_out = endpoints
    if not (endp_in.bEndpointAddress & 0x80 == 0x80):
        endp_in, endp_out = endp_out, endp_in

    import array
    buf = array.array("B", [1] * endp_in.wMaxPacketSize)
    import sys

    while True:
        try:
            data = device.read(endp_in.bEndpointAddress, endp_in.wMaxPacketSize)
            text = "".join([chr(v) for v in data])
            print(text, end="", flush=True)
        except libusb1.USBError:
            pass


def main(fd):
    device = get_usbdevice(fd, shell=True)

    assert device.idVendor == 0x10c4 and device.idProduct == 0xea60

    # print("\n", "#" * 40, "\n")
    # print(device)

    # mainly baud rate
    prep_usb_cp210x(device)
    # just poll read forever
    keep_reading(device)

    
if __name__ == "__main__":
    # https://wiki.termux.com/wiki/Termux-usb

    import sys
    # print("args:", sys.argv)

    fd = int(sys.argv[1])
    print("usb fd:", fd)
    main(fd)
